const express = require('express');
const router = express.Router();
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const Account = require('../models/Account');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');

// Middleware ki·ªÉm tra token (ch·ªâ d√πng JWT)
const authenticateToken = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Kh√¥ng t√¨m th·∫•y token' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
  }
};

// API t·∫°o ƒë·∫∑t ch·ªó + c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng (g·ªôp v√†o 1 transaction)
router.post('/', authenticateToken, async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const bookingData = {
      account: req.user._id,
      campus: req.body.campus,
      classId: req.body.classId,
      timeSlot: req.body.timeSlot,
      fullname: req.body.fullname,
      mssv: req.body.mssv,
      email: req.body.email,
      phonenumber: req.body.phonenumber,
      className: req.body.className,
      status: req.body.status || 'booked',
      description: req.body.description,
      date: req.body.date,
      dateVN: req.body.dateVN
    };

    const newBooking = new Booking(bookingData);
    await newBooking.save({ session });

    const room = await Room.findOne({
      classId: req.body.classId,
      campus: req.body.campus,
      timeSlot: req.body.timeSlot,
      description: req.body.description,
      date: req.body.date,
      dateVN: req.body.dateVN
    }).session(session);

    if (!room) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i');
    }

    // room.status = 'Reserved';
    room.status = 'Booked';
    await room.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.status(201).json({ message: 'ƒê·∫∑t ch·ªó th√†nh c√¥ng', booking: newBooking });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi t·∫°o ƒë·∫∑t ch·ªó:', error);
    res.status(500).json({ message: 'L·ªói server khi t·∫°o ƒë·∫∑t ch·ªó' });
  }
});

// API l·∫•y danh s√°ch ƒë·∫∑t ch·ªó c·ªßa ng∆∞·ªùi d√πng
router.get('/', authenticateToken, async (req, res) => {
  try {
    const bookings = await Booking.find({ account: req.user._id })
      .populate('account', 'username Name MSSV email');
    res.status(200).json(bookings);
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t ch·ªó:', error);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch ƒë·∫∑t ch·ªó' });
  }
});

// API x√≥a ƒë·∫∑t ch·ªó
router.delete('/:id', authenticateToken, async (req, res) => {
  const bookingId = req.params.id;

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const booking = await Booking.findById(bookingId).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t ch·ªó' });
    }

    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ƒë·∫∑t ch·ªó n√†y' });
    }

    console.log('üßæ Booking b·ªã x√≥a:', {
      classId: booking.classId,
      campus: booking.campus,
      timeSlot: booking.timeSlot,
    });

    // X√≥a ƒë·∫∑t ch·ªó
    await Booking.findByIdAndDelete(bookingId).session(session);

    const updatedRoom = await Room.findOneAndUpdate(
      {
        classId: booking.classId,
        campus: booking.campus,
        timeSlot: booking.timeSlot,
      },
      { status: 'Available' },
      { session, new: true }
    );

    if (updatedRoom) {
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng ${updatedRoom.classId} th√†nh Available`);
    } else {
      console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i`);
    }

    await session.commitTransaction();
    session.endSession();

    res.status(200).json({ message: 'X√≥a ƒë·∫∑t ch·ªó th√†nh c√¥ng' });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error('‚ùå L·ªói khi x√≥a ƒë·∫∑t ch·ªó:', error);
    res.status(500).json({ message: 'L·ªói server khi x√≥a ƒë·∫∑t ch·ªó' });
  }
});

router.get('/bookings', authenticateToken, async (req, res) => {
  try {
    const { excludeDeleted } = req.query;
    const query = excludeDeleted ? { isDeleted: { $ne: true } } : {};
    if (req.user.role !== 'admin') {
      query.account = req.user._id; // Ch·ªâ cho ph√©p ng∆∞·ªùi d√πng xem bookings c·ªßa h·ªç
    }
    const bookings = await Booking.find(query).populate('account', 'username Name MSSV email');
    res.json(bookings);
  } catch (err) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t ch·ªó:', err);
    res.status(500).json({ message: err.message });
  }
});
// API l·∫•y danh s√°ch ph√≤ng tr·ªëng ƒë·ªÉ chuy·ªÉn l·ªõp
router.get('/available-classes', authenticateToken, async (req, res) => {
  try {
    const rooms = await Room.find({ status: 'Available' });
    res.json(rooms);
  } catch (err) {
    console.error('L·ªói khi l·∫•y danh s√°ch ph√≤ng tr·ªëng:', err);
    res.status(500).json({ message: err.message });
  }
});
// API chuy·ªÉn l·ªõp
router.post('/transfer-class', authenticateToken, async (req, res) => {
  const { bookingId, newRoomId } = req.body;

  // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
  if (!newRoomId || typeof newRoomId !== 'string') {
    return res.status(400).json({ message: 'newRoomId kh√¥ng h·ª£p l·ªá, ph·∫£i l√† chu·ªói' });
  }

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // T√¨m booking
    const booking = await Booking.findById(bookingId).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i isDeleted
    if (booking.isDeleted) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ chuy·ªÉn l·ªõp' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn chuy·ªÉn l·ªõp n√†y' });
    }

    // T√¨m ph√≤ng m·ªõi b·∫±ng _id
    const newRoom = await Room.findById(newRoomId).session(session);
    if (!newRoom) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng m·ªõi v·ªõi newRoomId: ' + newRoomId });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i ph√≤ng m·ªõi
    if (newRoom.status !== 'Available') {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'Ph√≤ng m·ªõi kh√¥ng tr·ªëng' });
    }

    // T√¨m ph√≤ng c≈©
    const oldRoom = await Room.findOne({
      classId: booking.classId,
      campus: booking.campus,
      timeSlot: booking.timeSlot,
      date: booking.date,
    }).session(session);

    if (!oldRoom) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng c≈©' });
    }

    // C·∫≠p nh·∫≠t th√¥ng tin ƒë·∫∑t ch·ªó d·ª±a tr√™n th√¥ng tin c·ªßa ph√≤ng m·ªõi
    booking.classId = newRoom.classId;
    booking.timeSlot = newRoom.timeSlot;
    booking.date = newRoom.date;
    booking.status = 'transferred';

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng m·ªõi v√† ph√≤ng c≈©
    newRoom.status = 'Booked';
    oldRoom.status = 'Available';

    // L∆∞u thay ƒë·ªïi
    await newRoom.save({ session });
    await oldRoom.save({ session });
    await booking.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.json({
      message: 'Chuy·ªÉn l·ªõp th√†nh c√¥ng. Vui l√≤ng x√°c nh·∫≠n ƒë·ªÉ ho√†n t·∫•t.',
      booking: {
        _id: booking._id,
        classId: booking.classId,
        timeSlot: booking.timeSlot,
        campus: booking.campus,
        status: booking.status,
        fullname: booking.fullname,
        date: booking.date,
        dateVN: booking.dateVN,
        description: booking.description,
      },
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi chuy·ªÉn l·ªõp:', err);
    res.status(500).json({ message: err.message });
  }
});
// API x√°c nh·∫≠n chuy·ªÉn l·ªõp
router.post('/confirm-transfer', authenticateToken, async (req, res) => {
  const { bookingId } = req.body;

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const booking = await Booking.findById(bookingId).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i isDeleted
    if (booking.isDeleted) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ x√°c nh·∫≠n chuy·ªÉn l·ªõp' });
    }

    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n chuy·ªÉn l·ªõp n√†y' });
    }

    if (booking.status !== 'transferred') {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó kh√¥ng ·ªü tr·∫°ng th√°i transferred' });
    }

    booking.status = 'booked';
    await booking.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.json({
      message: 'X√°c nh·∫≠n chuy·ªÉn l·ªõp th√†nh c√¥ng. ƒê·∫∑t ch·ªó ƒë√£ ƒë∆∞·ª£c ho√†n t·∫•t.',
      booking: {
        _id: booking._id,
        classId: booking.classId,
        timeSlot: booking.timeSlot,
        campus: booking.campus,
        status: booking.status,
        fullname: booking.fullname,
        date: booking.date,
        dateVN: booking.dateVN,
        description: booking.description,
      },
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi x√°c nh·∫≠n chuy·ªÉn l·ªõp:', err);
    res.status(500).json({ message: err.message });
  }
});
// API h·ªßy ƒë·∫∑t ch·ªó
router.post('/cancel-booking', authenticateToken, async (req, res) => {
  const { bookingId } = req.body;

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // T√¨m booking
    const booking = await Booking.findById(bookingId).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i isDeleted
    if (booking.isDeleted) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó ƒë√£ b·ªã x√≥a, kh√¥ng th·ªÉ h·ªßy' });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë·∫∑t ch·ªó n√†y' });
    }

    // T√¨m ph√≤ng t∆∞∆°ng ·ª©ng
    const room = await Room.findOne({
      classId: booking.classId,
      campus: booking.campus,
      timeSlot: booking.timeSlot,
      date: booking.date,
    }).session(session);

    if (!room) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking v√† ph√≤ng
    booking.status = 'cancelled';
    room.status = 'Available';

    // L∆∞u thay ƒë·ªïi
    await room.save({ session });
    await booking.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.json({
      message: 'H·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng',
      booking: {
        _id: booking._id,
        classId: booking.classId,
        timeSlot: booking.timeSlot,
        campus: booking.campus,
        status: booking.status,
        fullname: booking.fullname,
        isDeleted: booking.isDeleted,
        date: booking.date,
        dateVN: booking.dateVN,
        description: booking.description,
      },
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi h·ªßy ƒë·∫∑t ch·ªó:', err);
    res.status(500).json({ message: err.message });
  }
});
// API x√°c nh·∫≠n h·ªßy ƒë·∫∑t ch·ªó
router.post('/confirm-cancel', authenticateToken, async (req, res) => {
  const { bookingId } = req.body;

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const booking = await Booking.findById(bookingId).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó' });
    }

    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n h·ªßy ƒë·∫∑t ch·ªó n√†y' });
    }

    if (booking.status !== 'cancelled') {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó kh√¥ng ·ªü tr·∫°ng th√°i cancelled' });
    }

    booking.isDeleted = true;
    booking.deletedAt = new Date();
    await booking.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.json({
      message: 'X√°c nh·∫≠n h·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng',
      booking: {
        _id: booking._id,
        classId: booking.classId,
        timeSlot: booking.timeSlot,
        campus: booking.campus,
        status: booking.status,
        fullname: booking.fullname,
        isDeleted: booking.isDeleted,
        date: booking.date,
        dateVN: booking.dateVN,
        description: booking.description,
      },
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi x√°c nh·∫≠n h·ªßy ƒë·∫∑t ch·ªó:', err);
    res.status(500).json({ message: err.message });
  }
});

// API ho√†n t√°c h·ªßy ƒë·∫∑t ch·ªó
router.post('/undo-cancel', authenticateToken, async (req, res) => {
  const { bookingId } = req.body;

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const booking = await Booking.findById(bookingId).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó' });
    }

    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn ho√†n t√°c h·ªßy ƒë·∫∑t ch·ªó n√†y' });
    }

    if (booking.status !== 'cancelled') {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó kh√¥ng ·ªü tr·∫°ng th√°i cancelled' });
    }

    // T√¨m ph√≤ng hi·ªán t·∫°i
    const currentRoom = await Room.findOne({
      classId: booking.classId,
      campus: booking.campus,
      timeSlot: booking.timeSlot,
      date: booking.date,
    }).session(session);

    if (!currentRoom) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng hi·ªán t·∫°i' });
    }

    // Ki·ªÉm tra xem c√≥ booking n√†o kh√°c ƒëang s·ª≠ d·ª•ng ph√≤ng n√†y kh√¥ng
    const existingBooking = await Booking.findOne({
      classId: currentRoom.classId,
      campus: currentRoom.campus,
      timeSlot: currentRoom.timeSlot,
      date: currentRoom.date,
      status: 'booked',
      _id: { $ne: booking._id } // Lo·∫°i tr·ª´ booking hi·ªán t·∫°i
    }).session(session);

    if (existingBooking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'Ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi booking kh√°c, kh√¥ng th·ªÉ ho√†n t√°c' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking v√† ph√≤ng
    booking.status = 'booked';
    booking.isDeleted = false;
    currentRoom.status = 'Booked';

    await currentRoom.save({ session });
    await booking.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.json({
      message: 'Ho√†n t√°c h·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng. ƒê·∫∑t ch·ªó ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c.',
      booking: {
        _id: booking._id,
        classId: booking.classId,
        timeSlot: booking.timeSlot,
        campus: booking.campus,
        status: booking.status,
        fullname: booking.fullname,
        date: booking.date,
        dateVN: booking.dateVN,
        description: booking.description,
      },
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi ho√†n t√°c h·ªßy ƒë·∫∑t ch·ªó:', err);
    res.status(500).json({ message: err.message });
  }
});

// API ƒë√°nh d·∫•u ƒë·∫∑t ch·ªó l√† ƒë√£ x√≥a
router.patch('/bookings/:id', authenticateToken, async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const booking = await Booking.findById(req.params.id).session(session);
    if (!booking) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë·∫∑t ch·ªó' });
    }

    if (booking.account.toString() !== req.user._id && req.user.role !== 'admin') {
      await session.abortTransaction();
      session.endSession();
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ƒë·∫∑t ch·ªó n√†y' });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i isDeleted
    if (booking.isDeleted) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'ƒê·∫∑t ch·ªó ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥' });
    }

    // T√¨m ph√≤ng t∆∞∆°ng ·ª©ng
    const room = await Room.findOne({
      classId: booking.classId,
      campus: booking.campus,
      timeSlot: booking.timeSlot,
      date: booking.date,
    }).session(session);

    if (!room) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng' });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng v·ªÅ Available
    room.status = 'Available';
    await room.save({ session });

    // ƒê√°nh d·∫•u booking l√† ƒë√£ x√≥a
    booking.isDeleted = true;
    booking.deletedAt = new Date();
    await booking.save({ session });

    await session.commitTransaction();
    session.endSession();

    res.json({
      message: 'ƒê·∫∑t ch·ªó ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† x√≥a v√† ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªÅ tr·∫°ng th√°i Available',
      booking,
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('L·ªói khi ƒë√°nh d·∫•u x√≥a ƒë·∫∑t ch·ªó:', err);
    res.status(500).json({ message: err.message });
  }
});



// GET /booking/getNotification/:username
router.get('/getNotification/:username', async (req, res) => {
  try {
    const { username } = req.params;

    // T√¨m account theo username
    const account = await Account.findOne({ username });

    if (!account) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n' });
    }

    // L·∫•y t·∫•t c·∫£ booking li√™n quan c√≥ c√°c status c·∫ßn thi·∫øt
    const bookings = await Booking.find({
      account: account._id,
      status: { $in: ['booked', 'cancelled', 'transferred'] }
    }).sort({ updatedAt: -1 }); // s·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc

    // T·∫°o danh s√°ch th√¥ng b√°o
    const notifications = bookings.map(booking => {
      let content = '';

      switch (booking.status) {
        case 'booked':
          content = `B·∫°n ƒë√£ ƒë·∫∑t ch·ªó ph√≤ng ${booking.classId} : ${booking.timeSlot} th√†nh c√¥ng.`;
          break;
        case 'cancelled':
          content = `B·∫°n ƒë√£ h·ªßy ch·ªó ph√≤ng ${booking.classId} : ${booking.timeSlot}.`;
          break;
        case 'transferred':
          content = `B·∫°n ƒë√£ chuy·ªÉn t·ª´ ph√≤ng ${booking.classId} : ${booking.timeSlot} sang ${booking.classId} : ${booking.timeSlot}.`;
          break;
        default:
          content = `C·∫≠p nh·∫≠t m·ªõi v·ªÅ ph√≤ng ${booking.classId} : ${booking.timeSlot}.`;
      }

      return {
        content,
        createdAt: booking.updatedAt, // ƒë·ªÉ frontend c√≥ th·ªÉ hi·ªÉn th·ªã th·ªùi gian n·∫øu c·∫ßn
      };
    });

    res.json(notifications);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng b√°o:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});


module.exports = router;
